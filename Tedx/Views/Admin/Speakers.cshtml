@using X.PagedList.Mvc.Core
@using X.PagedList
@model X.PagedList.PagedList<Tedx.Models.User>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "SpeakerUser";

}

<style>
    /* Sidebar styles */
    .sidebar {
        height: 100vh; /* Full height */
        position: fixed; /* Fixed position */
        top: 56px; /* Below the navbar */
        left: 0;
        width: 250px; /* Sidebar width */
        padding-top: 20px;
        background-color: #1a1a1a; /* Dark gray background */
        border-right: 1px solid #333; /* Subtle border */
        transition: width 0.3s ease, margin-left 0.3s ease; /* Smooth transition */
    }

    .sidebar-sticky {
        position: relative;
        top: 0;
        padding: 20px;
    }

    .sidebar .nav-item {
        margin-bottom: 10px;
    }

    .sidebar .nav-link {
        color: #fff; /* White text */
        padding: 10px 15px;
        border-radius: 4px;
        transition: background-color 0.3s ease;
    }

        .sidebar .nav-link.active,
        .sidebar .nav-link:hover {
            background-color: #dc3545; /* Red background for active/hover */
            color: #fff; /* White text */
        }

    /* Adjust main content margin to account for the sidebar */
    #mainContent {
        margin-left: 250px; /* Match sidebar width */
        transition: margin-left 0.3s ease; /* Smooth transition */
    }

    /* Custom styles for pagination */
    .pagination {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

        .pagination a, .pagination span {
            padding: 10px 15px;
            margin: 0 5px;
            text-decoration: none;
            color: white;
            background-color: red;
            border-radius: 5px;
        }

            .pagination a:hover {
                background-color: darkred;
            }

        .pagination .current {
            background-color: darkred;
            cursor: not-allowed;
        }

        .pagination .prev, .pagination .next {
            background-color: #ccc;
        }

        .pagination .disabled {
            color: #999;
            background-color: #f0f0f0;
        }

    .table-responsive {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }

    /* Set consistent width for table columns */
    .table th, .table td {
        white-space: nowrap; /* Prevent text from wrapping in cells */
        padding: 10px; /* Padding for better spacing */
        text-align: center; /* Align text to the center of cells */
    }

        /* Optional: Set a max width for each column (adjust these values as needed) */
        .table th:nth-child(1), .table td:nth-child(1) {
            width: 150px;
        }

        .table th:nth-child(2), .table td:nth-child(2) {
            width: 200px;
        }

        .table th:nth-child(3), .table td:nth-child(3) {
            width: 150px;
        }

        .table th:nth-child(4), .table td:nth-child(4) {
            width: 100px;
        }

        .table th:nth-child(5), .table td:nth-child(5) {
            width: 100px;
        }

        .table th:nth-child(6), .table td:nth-child(6) {
            width: 150px;
        }

        .table th:nth-child(7), .table td:nth-child(7) {
            width: 150px;
        }

        .table th:nth-child(8), .table td:nth-child(8) {
            width: 150px;
        }

        .table th:nth-child(9), .table td:nth-child(9) {
            width: 250px;
        }

        .table th:nth-child(10), .table td:nth-child(10) {
            width: 150px;
        }

    /* Apply a minimum width for better handling of longer text */
    .table th, .table td {
        min-width: 80px; /* Ensure cells have a minimum size */
    }

    /* Style for the table header */
    .table th {
        background-color: #343a40;
        color: white;
    }

    /* Optional: Add zebra-striping to the table rows */
    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f8f9fa;
    }

    .table-responsive::-webkit-scrollbar {
        width: 8px; /* Adjust scrollbar width */
        height: 8px; /* Adjust scrollbar height */
    }

    .table-responsive::-webkit-scrollbar-thumb {
        background-color: #6c757d; /* Color of the scrollbar thumb */
        border-radius: 4px; /* Rounded corners for the scrollbar thumb */
    }

        .table-responsive::-webkit-scrollbar-thumb:hover {
            background-color: #495057; /* Darker color on hover */
        }

    .table-responsive::-webkit-scrollbar-track {
        background-color: #212529; /* Background color of the scrollbar track */
        border-radius: 4px;
    }


</style>
<div class="container-fluid">
    <div class="row">

        <!-- Sidebar -->
        @if (User.IsInRole("Admin"))
        {
            <div class="col-md-3 bg-dark sidebar" id="sidebar">
                <div class="sidebar-sticky">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="text-light">
                                المستخدمين
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-light @(ViewContext.RouteData.Values["action"]?.ToString() == "Listeners" ? "active" : "")"
                               asp-controller="Admin" asp-action="Listeners">
                                مستمع
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-light @(ViewContext.RouteData.Values["action"]?.ToString() == "Speakers" ? "active" : "")"
                               asp-controller="Admin" asp-action="Speakers">
                                متحدث
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        }        <!-- Main Content -->

        <div class="col-md-9 ml-sm-auto col-lg-9 px-4" id="mainContent">
            <br />
            <br />
            <h2 class="text-light mb-4">المستخدمين </h2>
            <div class="table-responsive">
                <table class="table table-dark table-striped">
                    <thead>
                        <tr>
                            <th>الاسم</th>
                            <th>البريد الالكتروني </th>
                            <th>رقم الهاتف</th>
                            <th> العمر</th>
                            <th> الحاله</th>
                            <th>الوظيفه</th>
                            <th> التصنيف</th>
                            <th>عرض البيانات</th>
                        </tr>

                        <form asp-action="SpeakerExportToExcel" method="get">
                            <br />

                            <input type="hidden" name="page" value="@ViewBag.Page" />
                            <input type="hidden" name="pageSize" value="10" />
                            <button type="submit" class="btn btn-primary">تصدير الصفحة الحالية إلى Excel</button>
                            <br />

                        </form>
                    </thead>

                    <tbody>
                        @foreach (var user in Model)
                        {
                            <tr>
                                <td>@user.FullName</td>
                                <td>@user.Email</td>
                                <td>@user.Phone</td>
                                <td>@user.Age</td>
                                <td>@user.RoleAs</td>
                                <td>@user.Job</td>
                                <td>@user.IdeaCategory</td>
                                <td>
                                    <a asp-action="UserDetails" asp-route-id="@user.Id" class="btn btn-info btn-sm">View</a>
                                </td>
                              
                            </tr>
                        }
                    </tbody>
                </table>
                <br />
                <div class="pagination-container">
                    @Html.PagedListPager((IPagedList)Model, page => Url.Action("Speakers", new { page }))
                </div>
            </div>
        </div>
    </div>
</div>



<script src="~/js/jquery.js"></script>
<script src="~/js/bootstrap.bundle.min.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

    <script>
        // Toggle sidebar collapse/expand
        document.getElementById('sidebarToggle').addEventListener('click', function () {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.getElementById('mainContent');

            if (sidebar.style.width === '250px') {
                sidebar.style.width = '0';
                mainContent.style.marginLeft = '0';
            } else {
                sidebar.style.width = '250px';
                mainContent.style.marginLeft = '250px';
            }
        });
    </script>

    <script>
        // Handle Confirm Email button click
        document.querySelectorAll('.confirm-email-btn').forEach(button => {
            button.addEventListener('click', function (e) {
                e.preventDefault(); // Prevent the default link behavior

                const userId = this.getAttribute('data-user-id'); // Get the user ID

                // Send an AJAX request to the ConfirmEmail action
                fetch(`/User/ConfirmEmail?userId=${userId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value // Anti-forgery token
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Show the success modal
                            const successModal = new bootstrap.Modal(document.getElementById('successModal'));
                            successModal.show();
                        } else {
                            alert(data.message); // Show an error message
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while sending the email.');
                    });
            });
        });
    </script>



